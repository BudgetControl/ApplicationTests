#!/usr/bin/env php
<?php

/**
 * BudgetControl Seeds Runner
 * 
 * This executable allows running seeds from the command line using vendor/bin/budgetcontrol-seeds
 * 
 * Usage:
 *   vendor/bin/budgetcontrol-seeds [options]
 * 
 * Options:
 *   --path=<path>    Custom path to seeds directory (default: resources/seeds)
 *   --verbose        Enable verbose output
 *   --quiet          Disable all output
 *   --help           Show this help message
 *   --list           List all discovered seeds without executing them
 *   --seed=<name>    Run only a specific seed by name
 * 
 * @package Budgetcontrol\ApplicationTests
 * @author Marco De Felice <marco.defelice@mlabfactory.it>
 */

// Find the bootstrap or autoloader
$bootstrapPaths = [
    __DIR__ . '/../../bootstrap/app.php',          // BudgetControl bootstrap (preferred)
    getcwd() . '/bootstrap/app.php',               // Project root bootstrap
    __DIR__ . '/../../../bootstrap/app.php',       // Alternative bootstrap location
];

$autoloadPaths = [
    __DIR__ . '/../vendor/autoload.php',           // When developing the package
    __DIR__ . '/../../../autoload.php',           // When installed as dependency
    __DIR__ . '/../../../../autoload.php',        // Alternative vendor structure
    getcwd() . '/vendor/autoload.php',            // When run from project root
];

$autoloader = null;
foreach ($autoloadPaths as $path) {
    if (file_exists($path)) {
        $autoloader = require_once $path;
        break;
    }
}

if (!$autoloader) {
    echo "Error: Could not find Composer autoloader.\n";
    echo "Please run 'composer install' first.\n";
    exit(1);
}

use Budgetcontrol\ApplicationTests\Seeds\RunSeeds;

/**
 * Parse command line arguments
 */
function parseArguments(array $argv): array
{
    $options = [
        'verbose' => false,
        'quiet' => false,
        'help' => false,
        'list' => false,
        'path' => null,
        'seed' => null,
    ];

    for ($i = 1; $i < count($argv); $i++) {
        $arg = $argv[$i];
        
        if ($arg === '--verbose' || $arg === '-v') {
            $options['verbose'] = true;
        } elseif ($arg === '--quiet' || $arg === '-q') {
            $options['quiet'] = true;
        } elseif ($arg === '--help' || $arg === '-h') {
            $options['help'] = true;
        } elseif ($arg === '--list' || $arg === '-l') {
            $options['list'] = true;
        } elseif (strpos($arg, '--path=') === 0) {
            $options['path'] = substr($arg, 7);
        } elseif (strpos($arg, '--seed=') === 0) {
            $options['seed'] = substr($arg, 7);
        } else {
            echo "Warning: Unknown option '{$arg}'\n";
        }
    }

    return $options;
}

/**
 * Show help message
 */
function showHelp(): void
{
    echo "\n";
    echo "BudgetControl Seeds Runner\n";
    echo "==========================\n\n";
    echo "Usage:\n";
    echo "  vendor/bin/budgetcontrol-seeds [options]\n\n";
    echo "Options:\n";
    echo "  --path=<path>    Custom path to seeds directory (default: resources/seeds)\n";
    echo "  --verbose, -v    Enable verbose output\n";
    echo "  --quiet, -q      Disable all output\n";
    echo "  --help, -h       Show this help message\n";
    echo "  --list, -l       List all discovered seeds without executing them\n";
    echo "  --seed=<name>    Run only a specific seed by name\n\n";
    echo "Examples:\n";
    echo "  vendor/bin/budgetcontrol-seeds --verbose\n";
    echo "  vendor/bin/budgetcontrol-seeds --path=database/seeds\n";
    echo "  vendor/bin/budgetcontrol-seeds --list\n";
    echo "  vendor/bin/budgetcontrol-seeds --seed=UserSeed\n\n";
}

/**
 * Custom logger for the CLI
 */
function createCliLogger(bool $quiet): callable
{
    return function (string $message, string $level = 'info') use ($quiet) {
        if ($quiet) {
            return;
        }

        $colors = [
            'info' => "\033[0;32m",    // Green
            'error' => "\033[0;31m",   // Red
            'warning' => "\033[0;33m", // Yellow
        ];

        $reset = "\033[0m";
        $color = $colors[$level] ?? $colors['info'];
        
        $timestamp = date('Y-m-d H:i:s');
        $levelUpper = strtoupper($level);
        
        echo "{$color}[{$timestamp}] [{$levelUpper}]{$reset} {$message}\n";
    };
}

// Main execution
try {
    $options = parseArguments($argv);

    if ($options['help']) {
        showHelp();
        exit(0);
    }

    // Create logger
    $logger = createCliLogger($options['quiet']);
    $verbose = $options['verbose'] && !$options['quiet'];

    // Create seeds runner
    $runner = new RunSeeds($verbose, $logger);

    // Discover seeds
    $seedsPath = $options['path'];
    
    if ($seedsPath) {
        if (!is_dir($seedsPath)) {
            $logger("Error: Seeds directory does not exist: {$seedsPath}", 'error');
            exit(1);
        }
        $runner->discoverSeeds($seedsPath);
    } else {
        // Use the private method through reflection to get user seeds path
        $reflection = new ReflectionClass($runner);
        $method = $reflection->getMethod('getUserSeedsPath');
        $method->setAccessible(true);
        $seedsPath = $method->invoke($runner);
        
        if (is_dir($seedsPath)) {
            $runner->discoverSeeds($seedsPath);
        } else {
            $logger("Seeds directory not found: {$seedsPath}", 'warning');
            $logger("Creating seeds directory...", 'info');
            mkdir($seedsPath, 0755, true);
            $logger("Seeds directory created: {$seedsPath}", 'info');
        }
    }

    // List seeds if requested
    if ($options['list']) {
        $seeds = $runner->getRegisteredSeeds();
        
        if (empty($seeds)) {
            $logger("No seeds found in {$seedsPath}", 'warning');
        } else {
            $logger("Discovered seeds:", 'info');
            foreach ($seeds as $seedName) {
                $seed = $runner->getSeed($seedName);
                echo "  - {$seedName}: " . $seed->getDescription() . "\n";
            }
        }
        exit(0);
    }

    // Run specific seed or all seeds
    if ($options['seed']) {
        $runner->runSeed($options['seed']);
        $logger("Seed '{$options['seed']}' completed successfully!", 'info');
    } else {
        $seeds = $runner->getRegisteredSeeds();
        
        if (empty($seeds)) {
            $logger("No seeds to execute in {$seedsPath}", 'warning');
            exit(0);
        }

        $runner->runAll();
        $logger("All seeds completed successfully!", 'info');
    }

    exit(0);

} catch (Exception $e) {
    $logger = $logger ?? function($msg, $level) { echo "[ERROR] {$msg}\n"; };
    $logger("Fatal error: " . $e->getMessage(), 'error');
    
    if (isset($options) && $options['verbose']) {
        $logger("Stack trace:", 'error');
        echo $e->getTraceAsString() . "\n";
    }
    
    exit(1);
} catch (Error $e) {
    $logger = $logger ?? function($msg, $level) { echo "[ERROR] {$msg}\n"; };
    $logger("Fatal error: " . $e->getMessage(), 'error');
    
    if (isset($options) && $options['verbose']) {
        $logger("Stack trace:", 'error');
        echo $e->getTraceAsString() . "\n";
    }
    
    exit(1);
}
